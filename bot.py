import logging
import aiohttp
import random
from datetime import datetime, timedelta
from telegram import Update, LabeledPrice
from telegram.ext import (
    ApplicationBuilder, MessageHandler, CommandHandler, PreCheckoutQueryHandler,
    filters, ContextTypes
)

# ------------------- –ù–ê–°–¢–†–û–ô–ö–ò -------------------
TELEGRAM_TOKEN = "8239579140:AAHoAeeqTx04AO1GuioSPZetJk51k6P4J_g"
HF_TOKEN = "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"
HF_TEXT_MODEL = "tiiuae/falcon-7b-instruct"
HF_IMAGE_MODEL = "stabilityai/stable-diffusion-2"

PAYMENT_PROVIDER_TOKEN = "–í–ê–®_PAYMENT_PROVIDER_TOKEN"

VIP_BASIC_PRICE = 100  # ‚ÇΩ —Ä–∞–∑–æ–≤–æ
VIP_PRO_PRICE = 200    # ‚ÇΩ –≤ –º–µ—Å—è—Ü
CURRENCY = "RUB"

BLACKLIST = ["—ç—Ä–æ—Ç–∏–∫–∞", "—Å–µ–∫—Å—É–∞–ª—å–Ω—ã–π", "–≥–æ–ª—ã–π", "–∏–Ω—Ç–∏–º", "–Ω–∞–≥–æ—Ç–∞"]
SENSITIVE_TOPICS = ["–ø–æ–ª–∏—Ç–∏–∫–∞", "—Ä–µ–ª–∏–≥–∏—è", "–Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å", "—ç—Ç–Ω–æ—Å", "–≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ", "–≤–æ–π–Ω–∞"]

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)

users_data = {}  # user_id -> {name, history, mode, vip_level, subscription_expiry}  

# ------------------- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò -------------------

def detect_mood(message: str):
    msg = message.lower()
    if any(word in msg for word in ["–≥—Ä—É—Å—Ç–Ω–æ", "–ø–µ—á–∞–ª—å", "—É–Ω—ã–ª–æ", "–ø–ª–æ—Ö–æ"]):
        return "sad"
    if any(word in msg for word in ["—Å—á–∞—Å—Ç–ª–∏–≤", "—Ä–∞–¥", "–∫—Ä—É—Ç–æ", "–∑–¥–æ—Ä–æ–≤–æ", "–æ—Ç–ª–∏—á–Ω–æ"]):
        return "happy"
    if any(word in msg for word in ["–∑–ª—é—Å—å", "—Å–µ—Ä–¥–∏—Ç", "—Ä–∞–∑–¥—Ä–∞–∂–µ–Ω"]):
        return "angry"
    return "neutral"

def add_flair(text: str, mood: str, user_name: str):
    emodji_map = {
        "happy": ["üòä", "üòÑ", "üå∏"],
        "sad": ["üòî", "üåßÔ∏è", "üíõ"],
        "angry": ["üò†", "üî•", "üí™"],
        "neutral": ["üôÇ", "üåø", "‚ú®"]
    }
    compliments = [
        f"{user_name}, —Ç—ã –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω—ã–π!",
        f"–ú–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è –æ–±—â–∞—Ç—å—Å—è —Å —Ç–æ–±–æ–π, {user_name}!",
        f"{user_name}, —Å–µ–≥–æ–¥–Ω—è —Ç—ã –ø—Ä—è–º–æ —Å–∏—è–µ—à—å!"
    ]
    flair = ""
    if mood in emodji_map:
        flair += random.choice(emodji_map[mood]) + " "
    if random.random() < 0.5:
        flair += random.choice(compliments)
    return text + " " + flair

def maybe_add_question(history_length):
    questions = [
        "–ê –º–æ–∂–µ—à—å —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ?",
        "–ö–∞–∫ —Ç—ã –∫ —ç—Ç–æ–º—É –ø—Ä–∏—à—ë–ª?",
        "–ß—Ç–æ —Ç—ã –æ–± —ç—Ç–æ–º –¥—É–º–∞–µ—à—å?",
        "–•–æ—á–µ—à—å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –µ—â—ë —á–µ–º-–Ω–∏–±—É–¥—å?",
        "–≠—Ç–æ –∑–≤—É—á–∏—Ç –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ! –ü—Ä–æ–¥–æ–ª–∂–∞–π‚Ä¶"
    ]
    if random.random() < 0.4 or history_length % 5 == 0:
        return " " + random.choice(questions)
    return ""

def maybe_suggest_vip(history_length, vip_level=0):
    if vip_level > 0:
        return None
    if history_length % 5 == 0 and random.random() < 0.2:
        suggestions = [
            "–•–æ—á–µ—à—å, —è –º–æ–≥—É —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –Ω–µ–º–Ω–æ–≥–æ –æ—Ç–∫—Ä–æ–≤–µ–Ω–Ω–µ–µ? üòè –ü–æ–ø—Ä–æ–±—É–π VIP: /buyvip_basic –∏–ª–∏ /buyvip_pro",
            "VIP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ–ª—É—á–∞—é—Ç –±–æ–ª—å—à–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–∞ –∏ –∫–∞—Ä—Ç–∏–Ω–æ–∫! üå∏ /buyvip_basic –∏–ª–∏ /buyvip_pro",
            "–ú–æ–≥—É –Ω–µ–º–Ω–æ–≥–æ –ø–æ—à–∞–ª–∏—Ç—å –≤ —á–∞—Ç–µ —Å VIP –¥–æ—Å—Ç—É–ø–æ–º üòÑ –ü–æ–ø—Ä–æ–±—É–π VIP: /buyvip_basic –∏–ª–∏ /buyvip_pro"
        ]
        return random.choice(suggestions)
    return None

def check_vip_status(user_id):
    user_info = users_data.get(user_id, None)
    if not user_info:
        return 0
    vip_level = user_info.get("vip_level", 0)
    if vip_level == 2:  # –ø–æ–¥–ø–∏—Å–∫–∞
        expiry = user_info.get("subscription_expiry")
        if expiry and datetime.now() > expiry:
            user_info["vip_level"] = 0  # –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å
            return 0
    return user_info.get("vip_level", 0)

# ------------------- –û–ë–†–ê–ë–û–¢–ö–ê –°–û–û–ë–©–ï–ù–ò–ô -------------------

async def get_hf_response(prompt: str, mood="neutral", mode="cute", history=None, user_name="–î—Ä—É–≥", vip_level=0):
    if vip_level == 0:
        for word in ["—Å–µ–∫—Å—É–∞–ª—å–Ω—ã–π", "–∏–Ω—Ç–∏–º", "–≥–æ—Ä—è—á–æ", "—ç—Ä–æ—Ç–∏–∫–∞"]:
            if word in prompt.lower():
                return "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ VIP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º üòè\n–ß—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –¥–æ—Å—Ç—É–ø: /buyvip_basic –∏–ª–∏ /buyvip_pro"

    if any(topic in prompt.lower() for topic in SENSITIVE_TOPICS):
        return f"–û–π, {user_name}, –¥–∞–≤–∞–π –æ—Å—Ç–∞–≤–∏–º —ç—Ç–∏ —Ç–µ–º—ã –≤ —Å—Ç–æ—Ä–æ–Ω–µ üòä –õ—É—á—à–µ –ø–æ–≥–æ–≤–æ—Ä–∏–º –æ —á–µ–º-—Ç–æ –ø—Ä–∏—è—Ç–Ω–æ–º –∏–ª–∏ –∑–∞–±–∞–≤–Ω–æ–º!"

    full_prompt = f"{user_name} —Å–∫–∞–∑–∞–ª: {prompt}"
    if history:
        full_prompt = "–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞: " + " | ".join(history) + f"\n{user_name}: {prompt}"

    if mode == "cute":
        full_prompt = f"–û—Ç–≤–µ—á–∞–π –º–∏–ª–æ, –¥—Ä—É–∂–µ–ª—é–±–Ω–æ, —Å–ª–µ–≥–∫–∞ —Ñ–ª–∏—Ä—Ç—É—é—â–µ, –∏—Å–ø–æ–ª—å–∑—É–π –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ({user_name}), –¥–æ–±–∞–≤–ª—è–π —ç–º–æ–¥–∑–∏ –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–µ —Ñ—Ä–∞–∑—ã: {full_prompt}"
    else:
        full_prompt = f"–û—Ç–≤–µ—á–∞–π –¥—Ä—É–∂–µ–ª—é–±–Ω–æ, —É—á–∏—Ç—ã–≤–∞–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ ({mood}) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_name}: {full_prompt}"

    url = f"https://api-inference.huggingface.co/models/{HF_TEXT_MODEL}"
    headers = {"Authorization": f"Bearer {HF_TOKEN}"}
    payload = {"inputs": full_prompt}

    async with aiohttp.ClientSession() as session:
        async with session.post(url, headers=headers, json=payload) as resp:
            if resp.status == 200:
                output = await resp.json()
                if isinstance(output, list) and len(output) > 0 and 'generated_text' in output[0]:
                    text = output[0]['generated_text']
                    text = add_flair(text, mood, user_name)
                    text += maybe_add_question(len(history) if history else 0)
                    return text
    return add_flair("–ò–∑–≤–∏–Ω–∏, —è –Ω–µ —Å–º–æ–≥ –ø—Ä–∏–¥—É–º–∞—Ç—å –æ—Ç–≤–µ—Ç.", mood, user_name)

async def generate_image(prompt: str, vip_level=0) -> str:
    if vip_level == 0:
        return None
    if any(word in prompt.lower() for word in BLACKLIST):
        return None
    url = f"https://api-inference.huggingface.co/models/{HF_IMAGE_MODEL}"
    headers = {"Authorization": f"Bearer {HF_TOKEN}"}
    payload = {"inputs": prompt}

    async with aiohttp.ClientSession() as session:
        async with session.post(url, headers=headers, json=payload) as resp:
            if resp.status == 200:
                data = await resp.read()
                filename = "image.png"
                with open(filename, "wb") as f:
                    f.write(data)
                return filename
    return None

# ------------------- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò -------------------

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    user_name = update.message.from_user.first_name
    message_text = update.message.text

    if user_id not in users_data:
        users_data[user_id] = {"name": user_name, "history": [], "mode": "cute", "vip_level": 0, "subscription_expiry": None}

    user_info = users_data[user_id]
    user_info["history"].append(f"{user_name}: {message_text}")
    if len(user_info["history"]) > 15:
        user_info["history"] = user_info["history"][-15:]

    vip_level = check_vip_status(user_id)
    mood = detect_mood(message_text)
    reply = await get_hf_response(
        message_text,
        mood=mood,
        mode=user_info["mode"],
        history=user_info["history"],
        user_name=user_name,
        vip_level=vip_level
    )

    suggestion = maybe_suggest_vip(len(user_info["history"]), vip_level=vip_level)
    if suggestion:
        reply += f"\n\n{suggestion}"

    user_info["history"].append(f"–ë–æ—Ç: {reply}")
    await update.message.reply_text(reply)

async def image_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    user_info = users_data.get(user_id, None)
    if user_info is None:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å, —á—Ç–æ–±—ã –±–æ—Ç –∑–∞–ø–æ–º–Ω–∏–ª —Ç–µ–±—è!")
        return

    if not context.args:
        await update.message.reply_text("–ù–∞–ø–∏—à–∏ /image [—Ç–≤–æ–π –∑–∞–ø—Ä–æ—Å]")
        return

    prompt = " ".join(context.args)
    vip_level = check_vip_status(user_id)
    if vip_level == 0:
        await update.message.reply_text("–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ VIP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º üòè\n–ß—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –¥–æ—Å—Ç—É–ø: /buyvip_basic –∏–ª–∏ /buyvip_pro")
        return

    await update.message.reply_text("–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –ø–æ–¥–æ–∂–¥–∏...")
    filename = await generate_image(prompt, vip_level=vip_level)
    if filename:
        await update.message.reply_photo(open(filename, "rb"))
    else:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")

# ------------------- –ü–õ–ê–¢–Å–ñ–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò -------------------

async def buyvip_basic(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_invoice(
        title="–ë–∞–∑–æ–≤—ã–π VIP (—Ä–∞–∑–æ–≤—ã–π)",
        description="–î–æ—Å—Ç—É–ø –∫ –ª—ë–≥–∫–æ–º—É –∏–Ω—Ç–∏–º–Ω–æ–º—É —Ç–µ–∫—Å—Ç—É –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π",
        payload="vip_basic",
        provider_token=PAYMENT_PROVIDER_TOKEN,
        currency=CURRENCY,
        prices=[LabeledPrice("–ë–∞–∑–æ–≤—ã–π VIP", VIP_BASIC_PRICE * 100)],
        start_parameter="vip-basic"
    )

async def buyvip_pro(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_invoice(
        title="–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π VIP (–ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –º–µ—Å—è—Ü)",
        description="–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ñ–ª–∏—Ä—Ç, –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ—Ç–≤–µ—Ç–æ–≤ –∏ –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–∞–∑–æ–≤–æ–≥–æ VIP",
        payload="vip_pro",
        provider_token=PAYMENT_PROVIDER_TOKEN,
        currency=CURRENCY,
        prices=[LabeledPrice("–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π VIP", VIP_PRO_PRICE * 100)],
        start_parameter="vip-pro"
    )

async def precheckout_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.pre_checkout_query
    if query.invoice_payload in ["vip_basic", "vip_pro"]:
        await query.answer(ok=True)
    else:
        await query.answer(ok=False, error_message="–û—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

async def successful_payment_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    payload = update.message.successful_payment.invoice_payload
    if user_id not in users_data:
        users_data[user_id] = {"name": update.message.from_user.first_name, "history": [], "mode": "cute", "vip_level": 0, "subscription_expiry": None}

    if payload == "vip_basic":
        users_data[user_id]["vip_level"] = 1
        await update.message.reply_text("–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã —Å—Ç–∞–ª–∏ –ë–∞–∑–æ–≤—ã–º VIP üòè –¢–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏.")
    elif payload == "vip_pro":
        users_data[user_id]["vip_level"] = 2
        users_data[user_id]["subscription_expiry"] = datetime.now() + timedelta(days=30)
        await update.message.reply_text("–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã —Å—Ç–∞–ª–∏ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º VIP üòè –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –Ω–∞ –º–µ—Å—è—Ü.")

# ------------------- –ó–ê–ü–£–°–ö –ë–û–¢–ê -------------------

if __name__ == "__main__":
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(CommandHandler("image", image_command))
    app.add_handler(CommandHandler("buyvip_basic", buyvip_basic))
    app.add_handler(CommandHandler("buyvip_pro", buyvip_pro))
    app.add_handler(PreCheckoutQueryHandler(precheckout_callback))
    app.add_handler(MessageHandler(filters.SUCCESSFUL_PAYMENT, successful_payment_callback))
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()
